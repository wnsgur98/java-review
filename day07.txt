day07
배열(Array)

1. 배열 : 저장공간의 나열
	문자열 => 문자들을 나열한것

	변수 => 저장공간
	    => 하나의 자료형 하나의 값

1) 변수를 여거개 선언하면 이름도 여러개 생긴다 -> 각 저장공간을 관리하기가 불편하다
   n칸 배열을 선언하면 저장공간이 여러개 생기고, 이름은 한 개 생긴다 -> 관리하기가 편하다
2) 규칙성이 없는 값에 규칙성을 부여하기 위함이다(index)

	변수[]		하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
	배열[][]		하나의 타입으로 된 하나의 값을 저장할 수 있는 저장공간의 나열
			(하나의 타입으로 된 여러값을 저장할 수 있다)

ex) 저장공간이 5개인 배열
	5칸짜리 정수형 값을 저장할 배열 [][][][][]	=> int ar
			    idx   0 1 2 3 4	=> ar[0] : 배열에서 0번째 저장공간\
	5개의 정수형 값을 저장할 변수 [], [], [], [], [] => int ar1, ar2, ar3, ar4, ar5;

3) 배열선언
	자료형 변수명 = 값; //변수선언
	
	배열 변수 선언 후 배열 생성
	(어떤 값을 넣을지는 모르지만 몇 칸을 만들지는 알 때 사용)
	자료형[] 배열명 =new 자료형[배열의크기];

	배열 변수 선언과 함께 초기값 할당
	(몇 칸을 만들지, 어떤 값을 넣을지 알 때 사용)
	자료형[] 배열명 = {값1, 값2, 값3,...};

	배열을 생성하지 않고 배열 변수를 초기화하는 방법
	(몇 칸 만들지, 어떤 값을 넣을지 모를 때 사용)
	자료형[] 배열명 = null;

	배열 변수 선언 후 배열 생성과 초기화
	(선언과 초기화를 별도로 하고 싶을 때 사용)
	※ 배열 생성시 반드시 new 자료형[]{} 형식으로 초기화 해야한다
	자료형[] 배열명; <-배열 선언
	배열명 = new 자료형[]{값1, 값2, 값3, ...};

2) new 연산자★★★
	저장공간에는 고유한 주소값이 존재한다

new : heap 메모리에 할당, 저장공간의 시작주소를 가져온다 *heap메모리는 동적메모리다
null : 주소의 초기값(어떤 주소가 들어갈지 모를 때 사용)

+) Runtime Data Area : JVM이 프로그램을 실행하는 동안 사용하는 메모리 영역
	JVM의 메모리영역은 OS(운영체제)에게 할당받은 메모리이다
	할당받은 메모리 공간 내에서 독자적으로 메모리를 과니하고 여러 영역으로 나누어 사용한다
	따라서 JVM의 메모리영역은 운영체제의 메모리 영역과는 분리되어 동작한다

	크게 5개 영역으로 구분 : 스택영역, 힙영역, 메소드영역, 프로그램 카운터 레지스터, 네이티브 메소드 스택

+) Stack Area 
	메소드 호출 시에 사용하는 메모리 공간
	정적으로 할당된 메모리 영역이다
	지역변수, 매개변수, 등의 데이터가 저장되며 참조자료형 변수에는 주소값이 저장된다
	
+) Heap Area
	배열, 객체가 생성되는 영역, new 키워드로 생성된 것
	동적으로 할당된 메모리 영역이다
프로그램이 실행중인 상탱에도 할당량이 변할 수 있어서 동적 메모리라고 한다.

3) 배열의 구조
	자료형[] 배열명 = new 자료형[칸수];
	자료형[] 참조변수 = new 자료형[칸수];
			배열의 시작주소값(참조값)

	int[] num = {5, 4, 3, 2, 1};
	---------   --------------
	stack          heap

	num 이라는 이름의 저장공간의 1개 만들어지고 여기에는 여러개의 값을 담을 수가 있다
	5개의 값을 위해서는 5칸이 필요하며, 이는 heap에 할당된다
	5칸의 저장공간 중 첫번째 저장공간의 주소값이 num 저장공간에 담기게되고, 다음 주소에 접근하기 위해서는 +n을 하면 된다
	java에서는 직접 주소에 접근할 수 있는 연산자가 없기 때문에 []로 사용하며 []안에는 index 번호를 넣게된다
	배열은 시작주소를 가지고 있기 때문에 인덱스 번호는 항상 0부터 시작한다

4) index
	배열을 생성할 때 각각의 저장공간에 붙여지는 번호이다
	0부터 순차적으로 증가하면서 부여된다
	배열의 이름이 한개이기 때문에 이름만으로는 배열의 여러공간에 접근할 수 없다
	그렇게 때문에 index 를 이용하여 각각의 저장공간에 접근한다
	배열명[index]로 사용하고 배열명[index]는 하나의 저장공간이므로 변수처럼 사용한다

5) length
	배열을 생성할 때 자동으로 생성되는 저장공간의 수(배열의 길이)
	배열의 길이는 한 번 만들어지면 변동될 수 없으므로 length는 상수라고 볼 수 있다.
	배열명.length;

6) 배열의 사용
	저장공간과 값을 정확히 구분할 수 있어야한다!!
	배열의 저장공간을 사용할 때는 배열명[index]로 사용한다
	*인덱스 번호를 활용해서 반복문 사용한다

                   0  1  2  3
   int[] arData = {3, 2, 6, 4};

   arData[0] = 10;   // 저장공간
   arData[1] = arData[0] + arData[4];   // 오류 : index 범위를 벗어남
   arData[2] = 30 + arData[2];   // 저장공간, 값

   int ar = arData[1];
   int ar = arData;

7)for-each문(빠른 for문, 확장 for문)
	배열이나 컬렉션을 순회할 때 사용하는 반복문
	요소의  타입과 변수명을 지정하여 간편하게 순화가능
	변수에는 배열의 요소가 한개씩 차례대로 담긴다
	요소를 수정할 수 없음(읽기전용)
	인덱스 사용 불가능
	요소의 타입은 배열이나 컬렉션의 타입과 일치해야 한다
	for(초기식; 조건식; 증감식){
		실행할문장;
	}
		
	for(요소의 타입 변수명 : 배열 or 컬렉션){
		실행할 문장;
	}

+) for-each문 사용시 유의할 점
	배열이나 컬렉션이 비어있을 경우 NullpointerException이 발생할 수 있다
	배열의 요소를 수정하는 작업이 필요할 때는 일반for문을 사용해야한다
























