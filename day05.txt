day05
연산자2 -> 제어문(조건문, 반복문)

0. 복습
1) 입력 메소드
	import java.util.Scanner
	Scanner sc = new Scanner(System.in);

	next()		입력받은 값을 문자열로 반환
	nextInt()	입력받은 값을 정수형으로 반환
	nextDouble()	입력받은 값을 실수형으로 반환
	nextLine()	입력받은 값을 문자열로 반환(엔터를 소모한다)

2)연산자
	연산자의 우선순위
	최 단 산 쉬 관 리 삼 대

	단항연산자		+,-, ++, --, !
	-증감연산자
----------------------------------------------------------------------
1. 연산자2
1) 삼항연산자(?:)
	조건식 ? 참일 때의 값 : 거짓일 때의 값

2. 비트연산자
	bit, 정보량의 최소 단위
	1bit 표현할 수 있는 수 0,1
	1bit 정보를 알기 힘드니 8bit = 1byte로 정보의 기본 단위로 사용하는것
	장점 : 사람의 언어를 컴퓨터의 언어로 바꾸는 과정을 생략해서 속도가 빠름

10진수 -> 2진수
	10 -> 1010(2)

1) 논리연산자
	and or not
	논리곱 (& AND)	두 비트가 모두 1이면 1
	
	11 -> 1010
	11 -> 1011
	     ------
	      1010 => 10

	논리합(| OR)	두 비트 중 하나라도 1이면 1
	1010
	1011
	-----
	1011 => 11

	배타논리합(^ XOR)	두 비트가 서로 다르면 1
	1010
	1011
	----
	0001 => 1			
	
	논리부정(~ NOT)	비트가 0이면 1로, 1이면 0으로
			* 부호비트 또한 반대로 바꿔줌(양수->음수, 음수->양수)
			* ~ㅜ => -(n + 1)	
	1010		
	----
	0101 => 5가 아닌 -11의 결과가 나온다

	00001010 => 10
	--------
	11110101

	2의 보수 형식으로 음수를 표현
	00001010
       +       1
	---------
	00001011  => -11

	=> 10이라는 10진수는 2진수로 1010(2)가 된다(몫이 1일 때까지 2로 나누면 된다)
		~1010	0101(2)로 5가 나올거라 예상하지만 결과는 -11이 나온다

	(증명)	컴퓨터는 덧셈만 가능하기 때문에 뺄셈을 구현하려면 음수가 필요하다
		비트중 가장 앞에 있는 비트를 최상위 비트라고 한다. 최상위 비트는 부호 비트로 사용된다(0 : 양수, 1 : 음수)

		1010으로 쓴 양의 정수 10은 앞에 부호비트가 01010인 것이다
		~01010 => 부호비트가 1로 바뀌므로 음수로 변환된다	=> 음수가 나온이야

	0001	-> 1		*부호비트는 8bit 8자리 수 중에 맨 앞에있는걸 뜻하고 맨 앞이 만약 0이라면 그 뒷자리는 0으로 채운다
	1111	-> -1		* X        X  X  X  X  X  X  X 
	----			 부호를 정함	
	0000			 (부호비트)

1의 보수 : 이진수의 모든 비트를 반전시켜서 구한다 (1 -> 0, 0 -> 1)
	음수를 표현하기 위해 사용되었지만 2의 보수가 더 많이 사용된다

	숫자 5 => 0101
	1의보수 => 1010

	음수 표현 : -x => x의 1의 보수
	0000	양수 0
	1111	음수 -0

2의 보수 : 1의 보수 + 1로 계산된다
	
	숫자 5 => 0101
	1의보수 => 1010
	2의보수 => 1010 + 1 = 1011

	음수 표현 : -x => x의 2의 보수
	0은 유일한 형태로 존재 0000

2) 쉬프트 연산자(이동)
좌쉬프트	A << B	: A의 비트를 왼쪽으로 B만큼 이동시킨다
		오른쪽에 생기는 빈칸은 0으로 채워진다
		지정된 비트수를 넘어가면 잘린다
	ex) 5 << 1	=10	왼쪽으로 한 번 이동하면 숫자가 2배로 증가
		5<<2	=20
우쉬프트	A >> B	: A의 비트를 오른쪽으로 B만큼 이동시킨다
		왼쪽에 생기는 빈칸은 부호비트에 따라 달라진다(양수 0으로  채움, 음수면 1로채움)
		이동 중 잘린 비트는 삭제된다
	ex) 8 >> 1	=4	오른쪽으로 한 번 이동하면 숫자가 절반을 줄어둠 	
		8>>2	=2	

+) 암호화와 복호화
	데이터를 안전하게 전송하거나 저장하기 위한 과정

1)암호화
	원본 데이터를 변형하여 외부에서 알아보기 어려운 형태로 만든 과정
	특정 알고리즘과 키를 사용해서 원본 데이터를 암호화
	결과로 나온 암호문은 원본 데이터와는 다른 형태의 데이터이며, 키를 알지 못하는 한 해독하기 어렵다

2)복호화
	암호화 된 데이터를 다시 원래의 형태로 되돌리는 과정
	암호화 할 때 사용한 알고리즘과 동일한 키를 사용하여 암호화된 데이터를 해동
	복호화된 결과는 원본 데이터로 복원

+) 대칭키와 비대칭키
1) 대칭키
	대칭키 암호화는 하나의 키를 사용하여 데이터를 암호화하고 복호화하는 방법
	대칭키 암호화는 속도가 빠르고 효율적이며 대부분의 일상적인 데이터 보호작업에 사용

2) 비대칭키
	비대칭키 암호화는 두개의 서로 다른 키, 공개키(public key)와 개인키(private key)를 사용하여 데이터를 암호화하고 복호화하는 방법
	공개키는 누구나 알 수 있는 키이며 개인키는 소유자만 알고있어야하는 비밀한 키
	데이터를 공개키로 암호화하면 개인키로만 복호화할 수 있고, 개인키로 암호화한 데이터는 공개키로만 복호화할 수 있음
	데이터의 안전한 전송과 디지털 서명에 사용

3.제어문
	프로그램의 흐름을 제어한다

	조건문 : 조건식의 결과에 따라 실행흐름을 결정한다
		if문, if~else문, if~else if~else문, switch문
	반복문 : 특정 조건을 만족할 때까지 실행 코드를 반복 실행한다
		for문, wile문, do~while문
	기타제어문 : 흐름을 건너뛰거나 즉시 종료한다
		break문, continue문

1) 조건문
- if문 : 조건식의 결과가 true이면 중괄호 영역 안으로 들어가서 문장을 실행하고 다음 코드로 내려간다
	조건식의 결과가 false이면 중괄호 영역으로 들어가지 않고 다음 코드를 실행한다

	if(조건식){
		실행할 문장;
	}

- if~else문 : 조건식의 결과가 true이면 if문의 블록이 실행되고, else문은 실행되지 않는다
		조건식의 결과가 false이면 else문이 실행된다
	
	if(조건식){
		조건식이 true일 때 실행할 문장;
	}else{
		조건식이 false일 때 실행할 문장;
	}

- if~else if~else문 : 조건이 2개 이상일 때 사용된다
	
	if(조건식1) {
		조건식1이 true일 때 실행할 문장;
	}else if(조건식2) {
		조건식1이 false이고 조건식2가 true일 때 실행할 문장;
	}else {
		조건식1, 조건식2가 모두 거짓일 때 실행할 문장;
	}

- if	: 조건식이 true면 영역안의 코드가 실행됨
- else if : 위의 조건식이 false이고 else if의 조건식이 true면 해당 영역안의 코드가 실행됨
- else	: 위의 조건식이 모두거짓이면 실행됨



else if와 else if문 없이는 사용이 불가능하다

2) switch문
	조건식의 값에 따라 여러 case 중 하나를 실행한다 * case마다 break; 꼭 사용하기

	switch(변수 or 값){
		case 값1:
			//값1일 때 실행문
			break;
		case 값2:
			//값2일 때 실행문;
`			break;
		case 값3:
			//값3일 때 실행문;
			break;
		...
		default:
			위 조건에 해당하지 않을 때 실행문;
			break;
	}

- switch문 사용할 수 있는 변수 타입 : byte, short, int, char, String, enum
- 사용할 수 없는 변수 타입 : long, double, float, boolean

+) 삼항 연산자, if문, switch문의 비교
	삼항연산자 : 조건식이 1개 있을 경우 사용 true, false 나눌 때
	if문 : 조건식에 관계연산자와 논리연산자 등을 연결하거나 여러개의 조건이 있어야하는 경우
	switch문 : 하나의 변수에 여러개의 값이 담길 수 있고, case의 값과 같은지를 비교할 때 사용

2) 반복문
	특정 조건을 만족할때 까지 코드 블록을 반복 실행

-for문 : 반복횟수가 정해져있을 때 주로 사용 (범위가 정해져있을 때)
	for(초기식; 조건식; 증감식){
		조건식이 true일 동안 실행;
	}

	초기식 : 처음에 설정할 값(변수) => int i = 0;
	조건식 : 조건이 true면 영역안의 문장을 실행시키고 false면 for문 탈출
	증감식 : 값을 얼마나 증감할지 정하는 식

-while문 : 조건식이 참인 동안 반복 (범위를 모를 때)
	실행중에 조건식이 거짓(false)이 될 수 있어야 무한루프에 빠지지 않는다

	변수 선언
	while(조건식){
		조건식이 true일 동안 실행할 문장;
	}

+) 오류 상황과 해결 방법
	논리연산자르 for문에서 사용할 때 조건의 정확성과 논리적인 순서를 검토하는 것이 중요하다!!

(1)무한루프	종료 조건이 항상 참으로 유지			종료조건을 명확히 설정
(2)반복문 실행X	초기값과 조건식이 맞지않아 반복문실행불가		초기값과 조건식을 재검토
(3)증감식 누락	증감 로직이 없어 조건식이 변하지 않음		증감식을 추가하거나 루프내부에서 증감 처리
(4)논리연산자	조건식의 평가 순서가 의도와 다르게 작동		괄호를 사용해 우선순위를 명확하게 설정
   우선순위 혼동
(5)문법 오류(=,==)	조건식에 잘못된 연산자를 사용		조건에 맞는 올바른 연산자를 사용






















