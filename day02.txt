day02
java란 -> 개발환경, 설치 -> 자료형 변수 -> 이스케이프문자, 출력메소드

0. java 배우기 전
1) 컴퓨터
	컴퓨터 = 하드웨어 + 소프트웨어

	컴퓨터 언어 : 컴퓨터가 이해하기 쉬운 언어 + 사람이 이해하기 쉬운언어
			저급언어			고급언어
	저급언어 : 기계어, 어셈블리어 등
		컴퓨터가 이해하기 쉽게 작성된 언어
		이식성이 낮음(운영체제에 따라 달라짐)
		실행속도가 빠름
		배우기가 어렵고 유지보수가 힘듦
	고급언어 : java, python 등
		일상언어에서 사용하는 표현을 그대로 가져다가 쓸 수 있다
		사람이 이해하기 쉽게 작성된 언어
		이식성이 높음(운영체제에 영향을 받지 않음)
		컴파일러나 인터프리터에 의해 저급언어로 번역되어 실행됨

	저급언어	-----번역프로그램----- 고급언어
		     컴파일러 - 한번에
		     인터프리터 - 한줄씩

2. java
	프로그래밍 언어 - 개발자와 컴퓨터가 소통하기 위한 언어
	소스코드 - 개발자가 읽을 수 있는 코드
		컴퓨터와 개발자가 소통할 수 있는 언어를 작성해 놓은 것
	컴파일러 - 컴파일 작업ㅇ르 해주는 번역기
	컴파일 - 사람의 언어를 컴퓨터의 언어로 번역해주는 작업
	컴파일러 해석방향 - 위에서 아래로, 좌에서 우로

2) 프로그램의 동작 원리
	일반 프로그램		java프로그램
	소프트웨어(프로그램)		소프트웨어(자바프로그램)
					jvm(자바 가상 운영체제)
	운영체제(os)		운영체제(os)
	하드웨어			하드웨어

- 일반프로그램의 동작원리
	프로그램이 실행 -> 운영체제 -> 하드웨어에 적절한 전기신호를 보내줌

- java 프로그램의 동작원리
	프로그램 실행 -> jvm이 프로그램과 운영체제 사이에서 존재 -> jvm이 운영체제와 소통하여 프로그램을 실행
	일반프로그램과는 다르게 운영체제에 의존적이지 않음(이식성이 높음)

	우리가 작성한 소스코드가 .java 파일로 만들게 된다
	-> 자바 컴파일러가 .class 파일로 변환(java bytecode)
	-> jvm이 운영체제(os)가 bytecode를 이해할 수 있도록 도와준다

3) JVM, JRE, JDK
	JVM(Java Nirtual Machine)
		운영체제에 맞춰서 java로 만든 프로그램을 실행시켜준다
	
	javac : .java 파일(사람의  언어로 된 파일) 컴파일
	java : .class 파일(컴퓨터의 언어로 된 파일) 실행

	=> java compiler는 JDK를 설치하면 bin에 존재하는 javac.exe를 의미한다

- JRE(Java Runtime Enviroment)
	JVM을 실행한다
	JVM을 싱행할 때 필요한 라이브러리 파일 등을 가지고 있다

- JDK(Java Development Kit)
	JRE를 포함한다
	JRE 외에 개발에 필요한 도구들을 가지고 있다
	JDK >JRE > JVM

3. JDK 설치
	설치확인
	cmd > java -version
	      javac -version

4. IDE(통합 개발 환경, Intergrated Development Environment) 설치
	다양한 언어를 지원하는 프로그래밍 통합 개발 환경이자 프로그래밍 도구

이클립스설정
	window > preference > 검색으로 진행
	- perspective 관점 변경
		persp 검색 > 기본 java EE(default)에서 java 클릭 후 make default 설정 > apply
	- 컴파일러 변경
		compiler 검색 > level 21에서 17로 변경(jdk 설치한 버전으로 맞춰 변경) > apply
	- 인코딩 타입 확인
		enc 검색 >workspace 클릭 > Text file encoding other에서 UTF-8로 선택 되어있는지 확인
	- 글씨체 변경
		font 검색 > Colors and Fonts 클릭 > Basic > Text Font 더블클릭 > 원하는 크기 설정으로 변경 > apply
	완료후 apply and close 클릭

5. 자바 소스코드를 쓰기 위한 과정
	자바 프로젝트 > 패키지 > 클래스 > 메소드 > 소스코드(명령어)

	프로젝트 폴더 생성
	ctrl + n > java project > 프로젝트 이름 설정, jre버전 17버전으로 변경, 모들체크 해제 > finish(엔터)

	패키지 생성
	ctrl + n > package > 패키지명 설정 > finish(엔터)

	클래스 생성
	ctrl + n > class > 클래스명 설정(첫글자는 대문자) > finish(엔터)
	
	메소드 생성
	클래스의 중괄호{} 안에서 main이라고 쓰고 ctrl + space bar > 엔터

	출력메소드 생성
	main 메소드의 중괄호 안에서 syso라고 쓰고 ctrl + space bar > 엔터

	실행
	ctrl + F11

	저장
	ctrl + s	

	라인 한줄 복사
	ctrl + alt + 방향키 위, 아래

	라인 한줄 이동
	atl + 방향키 위, 아래

	라인 한줄 삭제
	ctrl + d

	파일명, 패키지명, 프로젝트명 변경
	F2

	자동정렬
	ctrl + shift + f


6. 용어정리2
자바 프로젝트
	하나의 프로그램 단위
	프로그램을 구성하는 것들을 모아둔 폴더

패키지
	소스파일들의 묶음 단위
	프로젝트의 하위 폴더
	
소스파일
	.java로 끝나는 파일이며 소스코드가 작성된다
	이클립스에서 클래스를 생성하면 자동으로 클래스와 같은 이름으로 소스파일을 만들어준다

클래스
	자바에서 모든 코드는 클래스 내부에 작성된다
	클래스의 이름은 첫문자를 대문자로 작성해야한다

중괄호{}
	자바에서는 {}중괄호로 영역을 표시한다

메소드
	이름뒤에 소괄호()가 있는 대부분의 명령어는 메소드다
	키워드 뒤에 ()가 있는 명령어는 메소드가 아니다(ex for(){})
	메소드는 어떠한 기능을 의미한다
	메소드는 항상 클래스 영역 내부에 만들어져 있다
	
메인 메소드
	자바 프로그램이 실행되면 메인 메소드의 코드가 실행된다
	프로그램이 시작되는 시작점(entry point)

출력 메소드
	print()
	괄호안에 있는 것(값)을 콘솔창에 출력한다
	System.out.print("출력할 내용");	- 줄바꿈X
	System.out.println("출력할 내용1");	 - 줄바꿈 O

콘솔창
	입력과 출력이 가능한 창
	컴퓨터와 개발자가 의사소통 할 수 있는 창
	개발자가 제대로 코드를 작성했는지 확인하기 위해서 주로 사용한다
	
닷 연산자, 하위 연산자
	.
	~안에 라고 해석한다

세미콜론;
	자바에서는 세미콜론으로 문장의 끝을 표시한다

들여쓰기
	자바에서는 들여쓰기는 코드에 영향을 주지 않는다
	가독성을 높이기 위해 사용한다

주석
	한줄주석 : // (단축키 : ctrl + /)
	범위주석 : /* */ (단축키 : ctrl +shift + /)
	api주석 : /** */

	내가 쓴 코드를 다른 사람에게 설명하기 위한 코드
	잠시 일부 코드를 제외하고 실행시켜야할 때 사용되기도 한다

-----------------------------------------------------------------------------------------------------------------------------------
[1주차 주말과제]
notion 링크 공유(복제 권한 없앨 것) -> 상단 공유 -> 게시 -> 템플릿으로 복제 끄기
git java복습용 레포지토리 만들고 해당 링크 공유(public / readme 파일 추가할 것)
	- java 과제 코드와 내용 주석으로 달아서 week01에 올리기

java 과제
[서술형]
	1. 컴퓨터 언어의 저급언어와 고급언어의 차이를 설명하세요
	2. jvm, jre, jdk에 대해 아는대로 설명하고 설치한 것은 어떤것인지, 왜 그것을 설치했는지 설명하세요
	3. 자바프로젝트의 동작원리를 일반 프로젝트와 비교하여 설명하세요
	4. 이클립스에서 java 코드를 작성하고 실행하는 단계까지에 대해 아는대로 자세히 설멍하세요
	5. git과 git-hub의 차이와 왜 써야하는지 이유를 설명하세요
	6. git의  명령어와 의미를 아는대로 작성하세요
	7. git의 4단계 구조에 대해 설명하세요
[코드작성]
	프로젝트명 : weel01
	패키지명 : homework
	1. 이클립스를 설치 후 전체 화면 캡쳐하기 => 노션에 설치 과정 캡쳐 넣기
	2. 클래스이름 : HelloJava
		메인메소드에서 HelloJava를 출력하세요
		모든 코드에 주석으로 설명이 있어야 합니다
	3. 클래스이름 : PrintInfo
		메인메소드에서 출력메소드를 1개만 사용하여 본인의 이름과 나이를 출력하세요
	4. 클래스이름 : PrintInfo
		메인메소드에서 출력메소드를 2개 사용하여 과제를 작성하고 있는 날짜와 시간을 출력하세요(줄바꿈없이 출력할 것)
		ex)2024년 11월 xx일 xx시 xx분
	5. 코드 작성한 프로젝트를 git-hub에 올리고 링크를 강사님 개인 카톡으로 보내기
		커밋 메시지 : 작성 날짜 시간 내용	























































			